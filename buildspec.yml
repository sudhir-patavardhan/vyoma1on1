version: 0.2

cache:
  paths:
    - session-app/node_modules/**/*

phases:
  install:
    runtime-versions:
      nodejs: 18
      python: 3.11
    commands:
      - echo "Setting up AWS CLI configuration"
      - aws --version
      - echo "Creating S3 buckets if they don't exist"
      - aws s3 mb s3://yoursanskritteacher-lambda-deployments --region us-east-1 || true
      - aws s3 mb s3://yoursanskritteacher-react-app-deployments --region us-east-1 || true

      # Install dependencies for both frontend and backend
      - echo "Installing frontend dependencies"
      - cd session-app
      # Using 'npm install' instead of 'npm ci' to avoid build failures
      # 'npm ci' is stricter and requires an exact match with package-lock.json
      - npm install
      - cd ..
      - echo "Installing backend dependencies"
      - cd connectplatform
      - pip install -r requirements.txt boto3
      - cd ..

  build:
    commands:
      # Build both frontend and backend
      - echo "Building the React frontend"
      - cd session-app
      - NODE_ENV=production CI=false npm run build
      - echo "Completed building React frontend"
      - ls -la build/ || echo "Build directory not found"
      - cd ..
      - echo "Packaging the Lambda function"
      - cd connectplatform
      - chmod +x ./create-deployment.sh
      - ./create-deployment.sh
      - cd ..

  post_build:
    commands:
      # Deploy both frontend and backend
      - echo "Checking if frontend build directory exists"
      - |
        if [ -d "session-app/build" ]; then
          echo "Syncing frontend build artifacts to S3"
          aws s3 sync session-app/build/ s3://yoursanskritteacher-react-app-deployments/ --delete --exact-timestamps
          
          echo "Invalidating CloudFront cache"
          # Get CloudFront distribution ID
          CLOUDFRONT_DISTRIBUTION_ID=E1QE6S09JHB5ND
          echo "CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"
          
          # Create invalidation for all paths
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
          echo "CloudFront invalidation created"
        else
          echo "ERROR: Build directory does not exist. Build may have failed."
          ls -la session-app/
        fi
      - echo "Deploying backend Lambda functions"
      - cd connectplatform
      - echo "Creating/updating CloudFormation stack"
      - aws cloudformation deploy --template-file deployment-template.yml --stack-name yoursanskritteacher-api --parameter-overrides Stage=prod Region=us-east-1 UseExistingResources=false --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --no-fail-on-empty-changeset --region us-east-1
      - cd ..

artifacts:
  files:
    - "session-app/build/**/*"
    - "connectplatform/deployment-template.yml"
    - "connectplatform/lambda-deployment.zip"
  base-directory: "."
  discard-paths: no
