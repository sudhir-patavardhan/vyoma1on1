AWSTemplateFormatVersion: '2010-09-09'
Description: 'Your Sanskrit Teacher API - Connecting students with Sanskrit teachers'

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment environment (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod
  Region:
    Type: String
    Default: us-east-1
    Description: AWS Region for deployment
    AllowedValues:
      - us-east-1
      - ap-south-1
  UseExistingResources:
    Type: String
    Default: 'true'
    Description: If true, use existing DynamoDB tables rather than creating new ones
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  ShouldCreateNewResources: !Equals [!Ref UseExistingResources, 'false']

Resources:
  # Lambda function for handling API requests
  YourSanskritTeacherFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "your-sanskrit-teacher-api-function-${Stage}"
      Handler: app.lambda_handler
      Runtime: python3.11
      Region: us-east-1
      Code: 
        S3Bucket: yoursanskritteacher-lambda-deployments
        S3Key: lambda-deployment.zip
      Environment:
        Variables:
          STAGE: !Ref Stage
          DEPLOY_TIMESTAMP: !Ref AWS::StackName # This forces redeployment on every CloudFormation deployment
          BUILD_VERSION: 'will-be-replaced-during-deployment'
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      # Always publish a new version when deployed
      AutoPublishAlias: 'live'
      # No need for AutoPublishCodeSha256 as it's calculated automatically
      # We're using other mechanisms to force deployment:
      # 1. Unique S3Key for each deployment
      # 2. Updated environment variables each time
      # 3. Description changes with each deployment
  
  # API Gateway for the Lambda function
  YourSanskritTeacherApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "your-sanskrit-teacher-api-${Stage}"
      Description: API for Your Sanskrit Teacher platform
      EndpointConfiguration:
        Types:
          - REGIONAL
        Region: us-east-1
  
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource: '*'
  
  # API Gateway deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiRootMethod
      - ApiRootOptionsMethod
      - ApiProxyMethod
      - ApiProxyOptionsMethod
    Properties:
      RestApiId: !Ref YourSanskritTeacherApi
      StageName: !Ref Stage
  
  # API Gateway root resource
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref YourSanskritTeacherApi
      ResourceId: !GetAtt YourSanskritTeacherApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${YourSanskritTeacherFunction.Arn}/invocations"
        
  # API Gateway root OPTIONS method for CORS
  ApiRootOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref YourSanskritTeacherApi
      ResourceId: !GetAtt YourSanskritTeacherApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # API Gateway proxy resource
  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref YourSanskritTeacherApi
      ParentId: !GetAtt YourSanskritTeacherApi.RootResourceId
      PathPart: '{proxy+}'
  
  # API Gateway proxy method
  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref YourSanskritTeacherApi
      ResourceId: !Ref ApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${YourSanskritTeacherFunction.Arn}/invocations"
  
  # API Gateway proxy OPTIONS method for CORS
  ApiProxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref YourSanskritTeacherApi
      ResourceId: !Ref ApiProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # Lambda permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref YourSanskritTeacherFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${YourSanskritTeacherApi}/*/*/*"

  # DynamoDB Tables
  UserProfilesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "UserProfiles-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  TeacherAvailabilityTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "TeacherAvailability-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: availability_id
          AttributeType: S
      KeySchema:
        - AttributeName: availability_id
          KeyType: HASH

  BookingsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "Bookings-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH

  SessionsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "Sessions-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH

  ServiceCatalogTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "ServiceCatalog-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: service_id
          AttributeType: S
      KeySchema:
        - AttributeName: service_id
          KeyType: HASH

  # S3 bucket for user uploads
  UploadsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "yoursanskritteacher-uploads-${Stage}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
            
  # Payment system tables
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "Payments-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: payment_id
          AttributeType: S
        - AttributeName: order_id
          AttributeType: S
        - AttributeName: student_id
          AttributeType: S
        - AttributeName: teacher_id
          AttributeType: S
      KeySchema:
        - AttributeName: payment_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: OrderIdIndex
          KeySchema:
            - AttributeName: order_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StudentPaymentsIndex
          KeySchema:
            - AttributeName: student_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: TeacherPaymentsIndex
          KeySchema:
            - AttributeName: teacher_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  RazorPayConfigTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "RazorPayConfig-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: config_id
          AttributeType: S
      KeySchema:
        - AttributeName: config_id
          KeyType: HASH

Outputs:
  YourSanskritTeacherApi:
    Description: "API Gateway endpoint URL for Your Sanskrit Teacher API"
    Value: !Sub "https://${YourSanskritTeacherApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  YourSanskritTeacherFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt YourSanskritTeacherFunction.Arn
  UploadsBucketName:
    Description: "S3 bucket for user uploads"
    Value: !Ref UploadsBucket